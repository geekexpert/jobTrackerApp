{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst API_URL = \"https://localhost:8484/api/JobApplication\";\n\n// Define the type for a job application\n\n// Define the initial state\n\n// Initial state\nconst initialState = {\n  jobs: [],\n  loading: false,\n  error: null\n};\n\n// Async thunk to fetch job applications\nexport const fetchJobApplications = createAsyncThunk(\"jobApplications/fetchJobApplications\", async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.get(API_URL);\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    return rejectWithValue(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || \"Failed to fetch jobs\");\n  }\n});\n\n// Create a slice\nconst jobApplicationSlice = createSlice({\n  name: \"jobApplications\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchJobApplications.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchJobApplications.fulfilled, (state, action) => {\n      state.loading = false;\n      state.jobs = action.payload;\n    }).addCase(fetchJobApplications.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport default jobApplicationSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","API_URL","initialState","jobs","loading","error","fetchJobApplications","_","rejectWithValue","response","get","data","_error$response","jobApplicationSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","reducer"],"sources":["/Users/johnsilva/Documents/Tutorials/job-app-tracker/src/redux/jobApplicationSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nconst API_URL = \"https://localhost:8484/api/JobApplication\";\n\n// Define the type for a job application\ninterface JobApplication {\n  id: number;\n  company: string;\n  position: string;\n  status: string;\n  applicationDate: string;\n}\n\n// Define the initial state\ninterface JobApplicationState {\n  jobs: JobApplication[];\n  loading: boolean;\n  error: string | null;\n}\n\n// Initial state\nconst initialState: JobApplicationState = {\n  jobs: [],\n  loading: false,\n  error: null,\n};\n\n// Async thunk to fetch job applications\nexport const fetchJobApplications = createAsyncThunk<JobApplication[]>(\n  \"jobApplications/fetchJobApplications\",\n  async (_, { rejectWithValue }) => {\n    try {\n      const response = await axios.get(API_URL);\n      return response.data;\n    } catch (error: any) {\n      return rejectWithValue(error.response?.data || \"Failed to fetch jobs\");\n    }\n  }\n);\n\n// Create a slice\nconst jobApplicationSlice = createSlice({\n  name: \"jobApplications\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchJobApplications.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(\n        fetchJobApplications.fulfilled,\n        (state, action: PayloadAction<JobApplication[]>) => {\n          state.loading = false;\n          state.jobs = action.payload;\n        }\n      )\n      .addCase(fetchJobApplications.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload as string;\n      });\n  },\n});\n\nexport default jobApplicationSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAuB,kBAAkB;AAC/E,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2CAA2C;;AAE3D;;AASA;;AAOA;AACA,MAAMC,YAAiC,GAAG;EACxCC,IAAI,EAAE,EAAE;EACRC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,OAAO,MAAMC,oBAAoB,GAAGP,gBAAgB,CAClD,sCAAsC,EACtC,OAAOQ,CAAC,EAAE;EAAEC;AAAgB,CAAC,KAAK;EAChC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAG,CAACT,OAAO,CAAC;IACzC,OAAOQ,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAON,KAAU,EAAE;IAAA,IAAAO,eAAA;IACnB,OAAOJ,eAAe,CAAC,EAAAI,eAAA,GAAAP,KAAK,CAACI,QAAQ,cAAAG,eAAA,uBAAdA,eAAA,CAAgBD,IAAI,KAAI,sBAAsB,CAAC;EACxE;AACF,CACF,CAAC;;AAED;AACA,MAAME,mBAAmB,GAAGf,WAAW,CAAC;EACtCgB,IAAI,EAAE,iBAAiB;EACvBZ,YAAY;EACZa,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACZ,oBAAoB,CAACa,OAAO,EAAGC,KAAK,IAAK;MAChDA,KAAK,CAAChB,OAAO,GAAG,IAAI;MACpBgB,KAAK,CAACf,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDa,OAAO,CACNZ,oBAAoB,CAACe,SAAS,EAC9B,CAACD,KAAK,EAAEE,MAAuC,KAAK;MAClDF,KAAK,CAAChB,OAAO,GAAG,KAAK;MACrBgB,KAAK,CAACjB,IAAI,GAAGmB,MAAM,CAACC,OAAO;IAC7B,CACF,CAAC,CACAL,OAAO,CAACZ,oBAAoB,CAACkB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MACzDF,KAAK,CAAChB,OAAO,GAAG,KAAK;MACrBgB,KAAK,CAACf,KAAK,GAAGiB,MAAM,CAACC,OAAiB;IACxC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAeV,mBAAmB,CAACY,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}