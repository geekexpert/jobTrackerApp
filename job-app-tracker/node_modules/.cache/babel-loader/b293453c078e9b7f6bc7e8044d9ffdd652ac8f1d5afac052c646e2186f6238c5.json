{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst API_URL = \"https://localhost:8484/api/JobApplication\";\n\n// Define the type for a job application\n\n// Define the initial state\n\n// Initial state\nconst initialState = {\n  jobs: [],\n  loading: false,\n  error: null\n};\n\n// Async thunk to fetch job applications\nexport const fetchJobApplications = createAsyncThunk(\"jobApplications/fetchJobApplications\", async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.get(API_URL);\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    return rejectWithValue(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || \"Failed to fetch jobs\");\n  }\n});\nexport const updateJobApplicationStatus = createAsyncThunk(\"jobApplications/updateJobApplicationStatus\", async (data, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.put(`${API_URL}/${data.jobId}`, {\n      status: data.status\n    }, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    return rejectWithValue(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || \"Failed to update status\");\n  }\n});\n\n// Create a slice\nconst jobApplicationSlice = createSlice({\n  name: \"jobApplications\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchJobApplications.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchJobApplications.fulfilled, (state, action) => {\n      state.loading = false;\n      state.jobs = action.payload;\n    }).addCase(fetchJobApplications.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    }).addCase(updateJobApplicationStatus.fulfilled, (state, action) => {\n      state.jobs = state.jobs.map(job => job.id === action.payload.id ? action.payload : job);\n    });\n    ;\n  }\n});\nexport default jobApplicationSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","API_URL","initialState","jobs","loading","error","fetchJobApplications","_","rejectWithValue","response","get","data","_error$response","updateJobApplicationStatus","put","jobId","status","headers","_error$response2","jobApplicationSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","map","job","id","reducer"],"sources":["/Users/johnsilva/Documents/Tutorials/job-app-tracker/src/redux/jobApplicationSlice.ts"],"sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nconst API_URL = \"https://localhost:8484/api/JobApplication\";\n\n// Define the type for a job application\ninterface JobApplication {\n  id: number;\n  company: string;\n  position: string;\n  status: string;\n  applicationDate: string;\n}\n\n// Define the initial state\ninterface JobApplicationState {\n  jobs: JobApplication[];\n  loading: boolean;\n  error: string | null;\n}\n\n// Initial state\nconst initialState: JobApplicationState = {\n  jobs: [],\n  loading: false,\n  error: null,\n};\n\n// Async thunk to fetch job applications\nexport const fetchJobApplications = createAsyncThunk<JobApplication[]>(\n  \"jobApplications/fetchJobApplications\",\n  async (_, { rejectWithValue }) => {\n    try {\n      const response = await axios.get(API_URL);\n      return response.data;\n    } catch (error: any) {\n      return rejectWithValue(error.response?.data || \"Failed to fetch jobs\");\n    }\n  }\n);\n\nexport const updateJobApplicationStatus = createAsyncThunk<\n  JobApplication,\n  { jobId: number; status: string }\n>(\"jobApplications/updateJobApplicationStatus\", async (data, { rejectWithValue }) => {\n  try {\n    const response = await axios.put(\n      `${API_URL}/${data.jobId}`,\n      { status: data.status },\n      { headers: { \"Content-Type\": \"application/json\" } }\n    );\n    return response.data;\n  } catch (error: any) {\n    return rejectWithValue(error.response?.data || \"Failed to update status\");\n  }\n});\n\n// Create a slice\nconst jobApplicationSlice = createSlice({\n  name: \"jobApplications\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchJobApplications.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(\n        fetchJobApplications.fulfilled,\n        (state, action: PayloadAction<JobApplication[]>) => {\n          state.loading = false;\n          state.jobs = action.payload;\n        }\n      )\n      .addCase(fetchJobApplications.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.payload as string;\n      })\n      .addCase(updateJobApplicationStatus.fulfilled, (state, action: PayloadAction<JobApplication>) => {\n        state.jobs = state.jobs.map((job) =>\n          job.id === action.payload.id ? action.payload : job\n        );\n      });;\n  },\n});\n\nexport default jobApplicationSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}